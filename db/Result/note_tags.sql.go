// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: note_tags.sql

package Database

import (
	"context"
	"database/sql"
)

const addTagToNote = `-- name: AddTagToNote :one
INSERT INTO note_tags (note_id, tag_id)
VALUES ($1, $2)
ON CONFLICT DO NOTHING
RETURNING note_id, tag_id
`

type AddTagToNoteParams struct {
	NoteID int32 `json:"note_id"`
	TagID  int32 `json:"tag_id"`
}

func (q *Queries) AddTagToNote(ctx context.Context, arg AddTagToNoteParams) (NoteTag, error) {
	row := q.db.QueryRowContext(ctx, addTagToNote, arg.NoteID, arg.TagID)
	var i NoteTag
	err := row.Scan(&i.NoteID, &i.TagID)
	return i, err
}

const getNotesForTag = `-- name: GetNotesForTag :many
SELECT n.note_id, n.title, n.owner, n.content, n.pinned, n.archived, n.created_at, n.updated_at
FROM notes n
INNER JOIN note_tags nt ON n.note_id = nt.note_id
WHERE nt.tag_id = $1
`

type GetNotesForTagRow struct {
	NoteID    int32          `json:"note_id"`
	Title     sql.NullString `json:"title"`
	Owner     sql.NullString `json:"owner"`
	Content   sql.NullString `json:"content"`
	Pinned    sql.NullBool   `json:"pinned"`
	Archived  sql.NullBool   `json:"archived"`
	CreatedAt sql.NullTime   `json:"created_at"`
	UpdatedAt sql.NullTime   `json:"updated_at"`
}

func (q *Queries) GetNotesForTag(ctx context.Context, tagID int32) ([]GetNotesForTagRow, error) {
	rows, err := q.db.QueryContext(ctx, getNotesForTag, tagID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetNotesForTagRow{}
	for rows.Next() {
		var i GetNotesForTagRow
		if err := rows.Scan(
			&i.NoteID,
			&i.Title,
			&i.Owner,
			&i.Content,
			&i.Pinned,
			&i.Archived,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTagsForNote = `-- name: GetTagsForNote :many
SELECT t.tag_id, t.name
FROM tags t
INNER JOIN note_tags nt ON t.tag_id = nt.tag_id
WHERE nt.note_id = $1
`

type GetTagsForNoteRow struct {
	TagID int32  `json:"tag_id"`
	Name  string `json:"name"`
}

func (q *Queries) GetTagsForNote(ctx context.Context, noteID int32) ([]GetTagsForNoteRow, error) {
	rows, err := q.db.QueryContext(ctx, getTagsForNote, noteID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTagsForNoteRow{}
	for rows.Next() {
		var i GetTagsForNoteRow
		if err := rows.Scan(&i.TagID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeTagFromNote = `-- name: RemoveTagFromNote :exec
DELETE FROM note_tags
WHERE note_id = $1 AND tag_id = $2
`

type RemoveTagFromNoteParams struct {
	NoteID int32 `json:"note_id"`
	TagID  int32 `json:"tag_id"`
}

func (q *Queries) RemoveTagFromNote(ctx context.Context, arg RemoveTagFromNoteParams) error {
	_, err := q.db.ExecContext(ctx, removeTagFromNote, arg.NoteID, arg.TagID)
	return err
}
