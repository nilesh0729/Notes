// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: notes.sql

package Database

import (
	"context"
	"database/sql"
)

const createNote = `-- name: CreateNote :one
INSERT INTO notes (
  title,
  content
) VALUES (
  $1, $2
)
RETURNING note_id, title, content, pinned, archived, created_at, updated_at
`

type CreateNoteParams struct {
	Title   sql.NullString `json:"title"`
	Content sql.NullString `json:"content"`
}

func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, createNote, arg.Title, arg.Content)
	var i Note
	err := row.Scan(
		&i.NoteID,
		&i.Title,
		&i.Content,
		&i.Pinned,
		&i.Archived,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteNote = `-- name: DeleteNote :exec
DELETE FROM notes
WHERE note_id = $1
`

func (q *Queries) DeleteNote(ctx context.Context, noteID int32) error {
	_, err := q.db.ExecContext(ctx, deleteNote, noteID)
	return err
}

const getNoteById = `-- name: GetNoteById :one
SELECT note_id, title, content, pinned, archived, created_at, updated_at FROM notes
WHERE note_id = $1 
LIMIT 1
`

func (q *Queries) GetNoteById(ctx context.Context, noteID int32) (Note, error) {
	row := q.db.QueryRowContext(ctx, getNoteById, noteID)
	var i Note
	err := row.Scan(
		&i.NoteID,
		&i.Title,
		&i.Content,
		&i.Pinned,
		&i.Archived,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listNotes = `-- name: ListNotes :many
SELECT note_id, title, content, pinned, archived, created_at, updated_at FROM notes
WHERE note_id > $1
ORDER BY note_id 
LIMIT $2
`

type ListNotesParams struct {
	NoteID int32 `json:"note_id"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) ListNotes(ctx context.Context, arg ListNotesParams) ([]Note, error) {
	rows, err := q.db.QueryContext(ctx, listNotes, arg.NoteID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Note{}
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.NoteID,
			&i.Title,
			&i.Content,
			&i.Pinned,
			&i.Archived,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNote = `-- name: UpdateNote :one
UPDATE notes
  set title = $2,
  content = $3
WHERE note_id = $1
RETURNING note_id, title, content, pinned, archived, created_at, updated_at
`

type UpdateNoteParams struct {
	NoteID  int32          `json:"note_id"`
	Title   sql.NullString `json:"title"`
	Content sql.NullString `json:"content"`
}

func (q *Queries) UpdateNote(ctx context.Context, arg UpdateNoteParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, updateNote, arg.NoteID, arg.Title, arg.Content)
	var i Note
	err := row.Scan(
		&i.NoteID,
		&i.Title,
		&i.Content,
		&i.Pinned,
		&i.Archived,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
