// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user.sql

package Database

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (
  username,
  hashed_password,
  email
) VALUES (
  $1, $2 ,$3
)
RETURNING username, hashed_password, email
`

type CreateUserParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
	Email          string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.HashedPassword, arg.Email)
	var i User
	err := row.Scan(&i.Username, &i.HashedPassword, &i.Email)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT username, hashed_password, email FROM "user"
WHERE username = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(&i.Username, &i.HashedPassword, &i.Email)
	return i, err
}
