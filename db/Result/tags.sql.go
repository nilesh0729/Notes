// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: tags.sql

package Database

import (
	"context"
)

const createTags = `-- name: CreateTags :one
INSERT INTO Tags (
  name
) VALUES (
  $1
)
RETURNING tag_id, name
`

func (q *Queries) CreateTags(ctx context.Context, name string) (Tag, error) {
	row := q.db.QueryRowContext(ctx, createTags, name)
	var i Tag
	err := row.Scan(&i.TagID, &i.Name)
	return i, err
}

const deleteTag = `-- name: DeleteTag :exec
DELETE FROM Tags
WHERE tag_id = $1
`

func (q *Queries) DeleteTag(ctx context.Context, tagID int32) error {
	_, err := q.db.ExecContext(ctx, deleteTag, tagID)
	return err
}

const getTag = `-- name: GetTag :one
SELECT tag_id, name FROM tags
WHERE tag_id = $1 
LIMIT 1
`

func (q *Queries) GetTag(ctx context.Context, tagID int32) (Tag, error) {
	row := q.db.QueryRowContext(ctx, getTag, tagID)
	var i Tag
	err := row.Scan(&i.TagID, &i.Name)
	return i, err
}

const listTags = `-- name: ListTags :many
SELECT tag_id, name FROM tags
WHERE tag_id > $1
ORDER BY tag_id
LIMIT $2
`

type ListTagsParams struct {
	TagID int32 `json:"tag_id"`
	Limit int32 `json:"limit"`
}

func (q *Queries) ListTags(ctx context.Context, arg ListTagsParams) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, listTags, arg.TagID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tag{}
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.TagID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTag = `-- name: UpdateTag :one
UPDATE Tags
SET name = $2
WHERE tag_id = $1
RETURNING tag_id, name
`

type UpdateTagParams struct {
	TagID int32  `json:"tag_id"`
	Name  string `json:"name"`
}

func (q *Queries) UpdateTag(ctx context.Context, arg UpdateTagParams) (Tag, error) {
	row := q.db.QueryRowContext(ctx, updateTag, arg.TagID, arg.Name)
	var i Tag
	err := row.Scan(&i.TagID, &i.Name)
	return i, err
}
