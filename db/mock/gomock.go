// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nilesh0729/Notes/db/Result (interfaces: Store)

// Package MockDB is a generated GoMock package.
package MockDB

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	Database "github.com/nilesh0729/Notes/db/Result"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddTagToNote mocks base method.
func (m *MockStore) AddTagToNote(arg0 context.Context, arg1 Database.AddTagToNoteParams) (Database.NoteTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTagToNote", arg0, arg1)
	ret0, _ := ret[0].(Database.NoteTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTagToNote indicates an expected call of AddTagToNote.
func (mr *MockStoreMockRecorder) AddTagToNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTagToNote", reflect.TypeOf((*MockStore)(nil).AddTagToNote), arg0, arg1)
}

// CreateNote mocks base method.
func (m *MockStore) CreateNote(arg0 context.Context, arg1 Database.CreateNoteParams) (Database.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNote", arg0, arg1)
	ret0, _ := ret[0].(Database.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNote indicates an expected call of CreateNote.
func (mr *MockStoreMockRecorder) CreateNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNote", reflect.TypeOf((*MockStore)(nil).CreateNote), arg0, arg1)
}

// CreateTags mocks base method.
func (m *MockStore) CreateTags(arg0 context.Context, arg1 string) (Database.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTags", arg0, arg1)
	ret0, _ := ret[0].(Database.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTags indicates an expected call of CreateTags.
func (mr *MockStoreMockRecorder) CreateTags(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTags", reflect.TypeOf((*MockStore)(nil).CreateTags), arg0, arg1)
}

// DeleteNote mocks base method.
func (m *MockStore) DeleteNote(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNote", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNote indicates an expected call of DeleteNote.
func (mr *MockStoreMockRecorder) DeleteNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNote", reflect.TypeOf((*MockStore)(nil).DeleteNote), arg0, arg1)
}

// DeleteTag mocks base method.
func (m *MockStore) DeleteTag(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTag", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTag indicates an expected call of DeleteTag.
func (mr *MockStoreMockRecorder) DeleteTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockStore)(nil).DeleteTag), arg0, arg1)
}

// GetNoteById mocks base method.
func (m *MockStore) GetNoteById(arg0 context.Context, arg1 int32) (Database.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNoteById", arg0, arg1)
	ret0, _ := ret[0].(Database.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNoteById indicates an expected call of GetNoteById.
func (mr *MockStoreMockRecorder) GetNoteById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNoteById", reflect.TypeOf((*MockStore)(nil).GetNoteById), arg0, arg1)
}

// GetNotesForTag mocks base method.
func (m *MockStore) GetNotesForTag(arg0 context.Context, arg1 int32) ([]Database.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotesForTag", arg0, arg1)
	ret0, _ := ret[0].([]Database.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotesForTag indicates an expected call of GetNotesForTag.
func (mr *MockStoreMockRecorder) GetNotesForTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotesForTag", reflect.TypeOf((*MockStore)(nil).GetNotesForTag), arg0, arg1)
}

// GetTag mocks base method.
func (m *MockStore) GetTag(arg0 context.Context, arg1 int32) (Database.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTag", arg0, arg1)
	ret0, _ := ret[0].(Database.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTag indicates an expected call of GetTag.
func (mr *MockStoreMockRecorder) GetTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTag", reflect.TypeOf((*MockStore)(nil).GetTag), arg0, arg1)
}

// GetTagsForNote mocks base method.
func (m *MockStore) GetTagsForNote(arg0 context.Context, arg1 int32) ([]Database.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagsForNote", arg0, arg1)
	ret0, _ := ret[0].([]Database.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagsForNote indicates an expected call of GetTagsForNote.
func (mr *MockStoreMockRecorder) GetTagsForNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagsForNote", reflect.TypeOf((*MockStore)(nil).GetTagsForNote), arg0, arg1)
}

// ListNotes mocks base method.
func (m *MockStore) ListNotes(arg0 context.Context, arg1 Database.ListNotesParams) ([]Database.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotes", arg0, arg1)
	ret0, _ := ret[0].([]Database.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNotes indicates an expected call of ListNotes.
func (mr *MockStoreMockRecorder) ListNotes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotes", reflect.TypeOf((*MockStore)(nil).ListNotes), arg0, arg1)
}

// ListTags mocks base method.
func (m *MockStore) ListTags(arg0 context.Context, arg1 Database.ListTagsParams) ([]Database.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTags", arg0, arg1)
	ret0, _ := ret[0].([]Database.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTags indicates an expected call of ListTags.
func (mr *MockStoreMockRecorder) ListTags(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTags", reflect.TypeOf((*MockStore)(nil).ListTags), arg0, arg1)
}

// RemoveTagFromNote mocks base method.
func (m *MockStore) RemoveTagFromNote(arg0 context.Context, arg1 Database.RemoveTagFromNoteParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTagFromNote", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTagFromNote indicates an expected call of RemoveTagFromNote.
func (mr *MockStoreMockRecorder) RemoveTagFromNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTagFromNote", reflect.TypeOf((*MockStore)(nil).RemoveTagFromNote), arg0, arg1)
}

// UpdateNote mocks base method.
func (m *MockStore) UpdateNote(arg0 context.Context, arg1 Database.UpdateNoteParams) (Database.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNote", arg0, arg1)
	ret0, _ := ret[0].(Database.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNote indicates an expected call of UpdateNote.
func (mr *MockStoreMockRecorder) UpdateNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNote", reflect.TypeOf((*MockStore)(nil).UpdateNote), arg0, arg1)
}

// UpdateTag mocks base method.
func (m *MockStore) UpdateTag(arg0 context.Context, arg1 Database.UpdateTagParams) (Database.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTag", arg0, arg1)
	ret0, _ := ret[0].(Database.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTag indicates an expected call of UpdateTag.
func (mr *MockStoreMockRecorder) UpdateTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTag", reflect.TypeOf((*MockStore)(nil).UpdateTag), arg0, arg1)
}
